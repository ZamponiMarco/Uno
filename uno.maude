fmod CARD is

	sorts Card Color Type .
	
	ops red green yellow blue all : -> Color [ctor] .
	ops 0 1 2 3 4 5 6 7 8 9 reverse stop plus2 plus4 change : -> Type [ctor] .
	op card : Type Color -> Card [ctor] .
	
	var Ca : Card .
	var T : Type .
	var C : Color .
	
	op getType : Card -> Type .
	eq getType(card(T, C)) = T .
	
	op getColor : Card -> Color .
	eq getColor(card(T,C)) = C .
	
	op isAction : Card -> Bool .
	eq isAction(Ca) = getType(Ca) == reverse or getType(Ca) == stop or  getType(Ca) == plus2 or  getType(Ca) == plus4 or getType(Ca) == change .
	
	op isNumber : Card -> Bool .
	eq isNumber(Ca) = not isAction(Ca) .
	
endfm

fmod DECK is 

	pr CARD .
	pr NAT .
	
	sort Deck .
	subsort Card < Deck .
	
	var D D' : Deck .
	var C C' : Card .
	
	op > : -> Deck [ctor] .
	op _|_ : Deck Deck -> Deck [assoc] .

	op removeFirstEmpty : Deck -> Deck .
	ceq removeFirstEmpty(D | D') = D' if D == > .
	eq removeFirstEmpty(D) = D .
	
	op removeCard : Deck Card -> Deck .
	eq removeCard(D, C') = removeFirstEmpty($rc(>, D, C')) .
	
	op $rc : Deck Deck Card -> Deck .
	ceq $rc(D', C | D, C') = D' | D if C == C' .
	ceq $rc(D', D, C') = D' | D if D == > .
	eq $rc(D', C | D, C') = $rc(D' | C, D, C') .

endfm

fmod HAND is 

	pr DECK .
	
	sort Hand .
	subsort Card < Hand .
	
	op empty : -> Hand [ctor] .
	op _ ~ _ : Hand Hand -> Hand [assoc comm] .
	
	var H : Hand .
	var D : Deck .
	var C : Card .
	var Col : Color .
	var R G B Y : Nat .
	var T : Type .
	
	op containsColor : Hand Color -> Bool .
	ceq containsColor(C ~ H, Col) = true if getColor(C) == Col .
	ceq containsColor(H, Col) = false if H == empty .
	eq containsColor(C ~ H, Col) = containsColor(H, Col) . 
	
	op containsType : Hand Type -> Bool .
	ceq containsType(C ~ H, T) = true if getType(C) == T .
	ceq containsType(H, T) = false if H == empty .
	eq containsType(C ~ H, T) = containsType(H, T) . 
	
	op getMostFrequentColor : Hand -> Color .
	eq getMostFrequentColor(H) = $gmfc(H, 0, 0, 0, 0) .
	
	op $gmfc : Hand Nat Nat Nat Nat -> Color .
	ceq $gmfc(H, R, G, B, Y) = red if H == empty and R >= G and R >= B and R >= Y .
	ceq $gmfc(H, R, G, B, Y) = green if H == empty and G >= R and G >= B and G >= Y .
	ceq $gmfc(H, R, G, B, Y) = blue if H == empty and B >= R and B >= G and B >= Y .
	ceq $gmfc(H, R, G, B, Y) = yellow if H == empty and Y >= R and Y >= G and Y >= B .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R + 1, G, B, Y) if getColor(C) == red .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G + 1, B, Y) if getColor(C) == green .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G, B + 1, Y) if getColor(C) == blue .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G, B, Y + 1) if getColor(C) == yellow .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G, B, Y) if getColor(C) == all .
	
	op removeHand : Deck Hand -> Deck .
	ceq removeHand(D, H) = D if H == empty .
	eq removeHand(D, C ~ H) = removeHand(removeCard(D, C), H).

endfm

fmod PLAYER is

	pr QID .
	pr HAND .
	
	sort Player .
	
	op _ = _ : Qid Hand -> Player [ctor] .
	
	var H : Hand .
	var Q : Qid .
	
	op getHand : Player -> Hand .
	eq getHand(Q = H) = H .
	
	op getLabel : Player -> Qid .
	eq getLabel(Q = H) = Q .

endfm

mod GAME is

	pr PLAYER .
	pr INT .

	sort Game .
	
	op game : Player Player Player Deck Deck Bool Bool Int -> Game [ctor] . 
	
	vars Ap Bp Cp : Player .
	vars A' B' C' : Qid .
	vars A B C : Hand .
	var Cou : Int .
	vars D G : Deck .
	vars P P' P'' : Bool .
	vars Ca Ca' : Card .
	var H : Hand .
	vars Col Col' : Color .
	vars T T' : Type .
	
	op possibleMove : Hand Card -> Bool .
	ceq possibleMove(Ca ~ H, Ca') = true if getColor(Ca) == getColor(Ca') or getType(Ca) == getType(Ca') or getColor(Ca) == all .
	ceq possibleMove(H, Ca') = false if H == empty .
	eq possibleMove(Ca ~ H, Ca') = possibleMove(H, Ca') .

	op isFinished : Player Player Player -> Bool .
	eq isFinished(Ap, Bp, Cp) = getHand(Ap) == empty or getHand(Bp) == empty or getHand(Cp) == empty .
	
	op hasWon : Game Qid -> Bool  .
	ceq hasWon(game(Ap, Bp, Cp, D, G, P, P', Cou), A') = getHand(Ap) == empty and not getHand(Bp) == empty and not getHand(Cp) == empty 
		if getLabel(Ap) = A' .
	eq hasWon(game(Ap, Bp, Cp, D, G, P, P', Cou), A') = false [owise] .

	*** THROW RULES 
	
	--- (ok)
	crl [throw-color] :
		game(A' = Ca' ~ H, Bp, Cp, D, Ca | G, false, P, 0) => game(A' = H, Bp, Cp, D, Ca' | Ca | G, true, P, 0) 
			if getColor(Ca') == getColor(Ca) and not isFinished(A' = Ca' ~ H, Bp, Cp) .
	
	--- (ok)
	crl [throw-type] :
		game(A' = Ca' ~ H, Bp, Cp, D, Ca | G, false, P, 0) => game(A' = H, Bp, Cp, D, Ca' | Ca | G, true, P, 0) 
			if getType(Ca) == getType(Ca') and not isFinished(A' = Ca' ~ H, Bp, Cp) .

	--- (ok)
	crl [throw-changecolor] :
		game(A' = Ca' ~ H, Bp, Cp, D, G, false, P, 0) => game(A' = H, Bp, Cp, D, (card(change, getMostFrequentColor(H)) | G), true, P, 0) 
			if getType(Ca') == change and not isFinished(A' = Ca' ~ H, Bp, Cp) .
		
	--- (ok)
	crl [throw-plusfour] :
		game(A' = Ca' ~ H, Bp, Cp, D, Ca | G, false, P, 0) => game(A' = H, Bp, Cp, D, card(plus4, getMostFrequentColor(H)) | Ca | G, true, P, 0) 
			if getType(Ca') == plus4 and not containsColor(H, getColor(Ca)) and not isFinished(A' = Ca' ~ H, Bp, Cp) .
		
	*** TURN CHANGE RULES
	
	--- (ok)
	crl [turn-action-reverse] :
		game(Ap, Bp, Cp, D, Ca | G, true, P, 0) => game(Cp, Bp, Ap, D, Ca | G, false, false, 0) 
			if getType(Ca) == reverse and not isFinished(Ap, Bp, Cp) .
		
	--- (ok)
	crl [turn-action-plustwo] :
		game(Ap, Bp, Cp, D, Ca | G, true, P, 0) => game(Bp, Cp, Ap, D, Ca | G, false, false, 2)
			if getType(Ca) == plus2 and not isFinished(Ap, Bp, Cp) .
			
	--- (ok)
	crl [turn-action-plusfour] :
		game(Ap, Bp, Cp, D, Ca | G, true, P, 0) => game(Bp, Cp, Ap, D, Ca | G, false, false, 4)
			if getType(Ca) == plus4 and not isFinished(Ap, Bp, Cp) .

	--- (ok)
	crl [turn-action-stop] :
		game(Ap, Bp, Cp, D, Ca | G, true, P, 0) => game(Cp, Ap, Bp, D, Ca | G,false, false, 0) 
			if getType(Ca) == stop and not isFinished(Ap, Bp, Cp) .
		
	--- (ok)
	crl [turn-number] :
		game(Ap, Bp, Cp, D, Ca | G, true, P, 0) => game(Bp, Cp, Ap, D, Ca | G,false, false, 0) 
			if (isNumber(Ca) or getType(Ca) == change) and not isFinished(Ap, Bp, Cp) .
		
	--- (ok)
	crl [turn-nomove] :
		game(Ap, Bp, Cp, D, Ca' | G, false, true, 0) => game(Bp, Cp, Ap, D, (Ca' | G), false, false, 0) 
			if not possibleMove(getHand(Ap), Ca') and not isFinished(Ap, Bp, Cp) .
		
	*** DRAWING RULES
			
	--- (ok)
	crl [stop-draw-forced] :
		game(A' = A, Bp, Cp, Ca | D, G, false, false, Cou) => game(Bp, Cp, A' = Ca ~ A, D, G, false, false, Cou - 1) 
			if Cou == 1 and not isFinished(A' = A, Bp, Cp) .
			
	--- (ok)
	crl [draw-forced] :
		game(A' = A, Bp, Cp, Ca | D, G, false, false, Cou) => game(A' = Ca ~ A, Bp, Cp, D, G, false, false, Cou - 1) 
			if Cou > 1 and not isFinished(A' = A, Bp, Cp) .
		
	--- (ok)
	crl [draw] :
		game(A' = A, Bp, Cp, Ca | D, Ca' | G, false, false, 0) => game(A' = A ~ Ca, Bp, Cp, D, Ca' | G, false, true, 0) 
			if not possibleMove(A, Ca') and not isFinished(A' = A, Bp, Cp) .
			
	--- (ok)
	crl [shuffle] :
		game(Ap, Bp, Cp, D, Ca | G, P, P', Cou) => game(Ap, Bp, Cp, removeCard(removeHand(removeHand(removeHand(shuffleDeck, getHand(Cp)), getHand(Bp)), getHand(Ap)), Ca), Ca | >, P, P', Cou)
			if D == > and not isFinished(Ap, Bp, Cp) .
		
	*** ------------
	*** EXAMPLE GAME
	*** ------------
			
	op handA : -> Hand .
	eq handA = card(7, yellow) ~ card(5, blue) ~ card(6, green) ~ card(stop, red) ~ card(5, green) ~ card(1, red) ~ card(1, green) ~ empty .
	
	op handB : -> Hand .
	eq handB = card(5, green) ~ card(change, all) ~ card(2, blue) ~ card(2, green) ~ card(8, green) ~ card(9, yellow) ~ card(8, blue) ~ empty .
	
	op handC : -> Hand .
	eq handC = card(plus2, red) ~ card(1, yellow) ~ card(stop, green) ~ card(7, green) ~ card(plus2, red) ~ card(1, green) ~ card(7, blue) ~ empty .
	
	op garbageDeck : -> Deck .
	eq garbageDeck = card(1, blue) | > .
		
	op drawDeck : -> Deck .
	eq drawDeck =  card(3, yellow) | card(4, yellow) | card(3, green) | card(stop, yellow) | card(8, yellow) | card(8, yellow) | card(3, yellow) | card(4, red) | card(stop, red) | card(2, blue) | card(reverse, blue) | card(plus4, all) | card(7, green) | card(stop, green) | card(plus2, blue) | card(plus2, yellow) | card(6, blue) | card(2, yellow) | card(8, red) | card(change, all) | card(4, blue) | card(4, blue) | card(reverse, blue) | card(1, blue) | card(5, red) | card(1, red) | card(0, green) | card(9, red) | card(reverse, green) | card(plus4, all) | card(0, red) | card(4, yellow) | card(1, yellow) | card(5, yellow) | card(5, yellow) | card(plus4, all) | card(stop, yellow) | card(6, yellow) | card(6, green) | card(reverse, green) | card(2, yellow) | card(6, yellow) | card(plus2, blue) | card(2, red) | card(8, red) | card(9, blue) | card(9, green) | card(stop, blue) | card(8, green) | card(reverse, yellow) | card(7, red) | card(3, green) | card(5, red) | card(4, red) | card(6, blue) | card(3, blue) | card(3, red) | card(5, blue) | card(0, yellow) | card(plus2, green) | card(9, green) | card(change, all) | card(9, red) | card(reverse, red) | card(6, red) | card(9, yellow) | card(3, blue) | card(6, red) | card(9, blue) | card(reverse, red) | card(3, red) | card(plus4, all) | card(stop, blue) | card(8, blue) | card(reverse, yellow) | card(7, blue) | card(plus2, green) | card(2, green) | card(4, green) | card(4, green) | card(change, all) | card(7, yellow) | card(0, blue) | card(plus2, yellow) | card(2, red) | card(7, red) | > .
				
	op shuffleDeck : -> Deck .
	eq shuffleDeck = card(plus2, yellow) | card(6, green) | card(9, blue) | card(5, blue) | card(9, yellow) | card(3, yellow) | card(6, blue) | card(0, blue) | card(plus4, all) | card(reverse, red) | card(stop, green) | card(stop, red) | card(8, blue) | card(4, red) | card(6, green) | card(2, red) | card(9, yellow) | card(plus4, all) | card(stop, yellow) | card(plus2, green) | card(6, yellow) | card(stop, red) | card(6, blue) | card(7, blue) | card(8, blue) | card(change, all) | card(4, green) | card(9, blue) | card(plus2, red) | card(0, red) | card(1, yellow) | card(2, yellow) | card(1, green) | card(2, blue) | card(2, red) | card(7, red) | card(reverse, yellow) | card(7, yellow) | card(stop, blue) | card(3, green) | card(reverse, green) | card(plus4, all) | card(3, red) | card(1, blue) | card(6, yellow) | card(change, all) | card(4, green) | card(7, blue) | card(0, yellow) | card(plus4, all) | card(reverse, blue) | card(5, red) | card(change, all) | card(1, blue) | card(1, yellow) | card(2, yellow) | card(8, yellow) | card(5, blue) | card(6, red) | card(1, green) | card(plus2, yellow) | card(2, green) | card(plus2, blue) | card(stop, blue) | card(5, green) | card(7, red) | card(4, yellow) | card(8, yellow) | card(7, green) | card(8, green) | card(5, yellow) | card(3, red) | card(7, yellow) | card(1, red) | card(stop, yellow) | card(9, green) | card(2, green) | card(4, blue) | card(5, red) | card(plus2, blue) | card(9, red) | card(4, yellow) | card(1, red) | card(3, blue) | card(2, blue) | card(stop, green) | card(5, yellow) | card(9, red) | card(9, green) | card(5, green) | card(change, all) | card(reverse, green) | card(4, red) | card(4, blue) | card(reverse, blue) | card(plus2, red) | card(0, green) | card(reverse, red) | card(8, red) | card(3, green) | card(reverse, yellow) | card(3, yellow) | card(8, red) | card(8, green) | card(7, green) | card(plus2, green) | card(6, red) | card(3, blue) | > .
	
	op exampleGame : -> Game .
	eq exampleGame = game('A = handA, 'B = handB, 'C = handC, drawDeck, garbageDeck, false, false, 0) .

endm