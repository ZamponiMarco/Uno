fmod CARD is

	sorts Card Color Type .
	
	ops red green yellow blue all : -> Color [ctor] .
	ops 0 1 2 3 4 5 6 7 8 9 reverse stop plus2 plus4 change : -> Type [ctor] .
	op card : Type Color -> Card [ctor] .
	
	var Ca : Card .
	var T : Type .
	var C : Color .
	
	op getType : Card -> Type .
	eq getType(card(T, C)) = T .
	
	op getColor : Card -> Color .
	eq getColor(card(T,C)) = C .
	
	op isAction : Card -> Bool .
	eq isAction(Ca) = getType(Ca) == reverse or getType(Ca) == stop or  getType(Ca) == plus2 or  getType(Ca) == plus4 or getType(Ca) == change .
	
	op isNumber : Card -> Bool .
	eq isNumber(Ca) = not isAction(Ca) .
endfm

fmod DECK is 

	pr CARD .
	pr NAT .
	
	sort Deck .
	subsort Card < Deck .
	
	var D : Deck .
	var C : Card .
	
	op > : -> Deck [ctor] .
	op _|_ : Deck Deck -> Deck [assoc] .
	
	op example : -> Deck .
	eq example = card(0, red) | card(1, red) | card(2, red) .
	
	op insertFirst : Deck Card -> Deck .
	eq insertFirst(D, C) = C | D .
	
	op seeFirst : Deck -> Card .
	eq seeFirst((C | D)) = C .
	
	op removeFirst : Deck -> Deck .
	eq removeFirst((C | D)) = D .
	
	op |_| : Deck -> Nat .
	eq | D | = $c(D) .
	
	op $c : Deck -> Nat .
	eq $c((C | D)) = 1 + $c(D) .
	eq $c(C) = 1 .

endfm

fmod HAND is 
	pr DECK .
	
	sort Hand .
	subsort Card < Hand .
	
	op empty : -> Hand [ctor] .
	op _ ~ _ : Hand Hand -> Hand [assoc comm] .
	
	var H : Hand .
	var C : Card .
	var R G B Y : Nat .
	var T : Type .
	
	op exampleHand : -> Hand .
	eq exampleHand = card(plus2, green) ~ card(plus2, green) ~ card(1,red) ~ card(plus2, yellow) ~ card(2,blue) ~ empty .
	
	op containsType : Hand Type -> Bool .
	ceq containsType(C ~ H, T) = true if getType(C) == T .
	ceq containsType(H, T) = false if H == empty .
	eq containsType(C ~ H, T) = containsType(H, T) . 
	
	op getMostFrequentColor : Hand -> Color .
	eq getMostFrequentColor(H) = $gmfc(H, 0, 0, 0, 0) .
	
	op $gmfc : Hand Nat Nat Nat Nat -> Color .
	ceq $gmfc(H, R, G, B, Y) = red if H == empty and R >= G and R >= B and R >= Y .
	ceq $gmfc(H, R, G, B, Y) = green if H == empty and G >= R and G >= B and G >= Y .
	ceq $gmfc(H, R, G, B, Y) = blue if H == empty and B >= R and B >= G and B >= Y .
	ceq $gmfc(H, R, G, B, Y) = yellow if H == empty and Y >= R and Y >= G and Y >= B .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R + 1, G, B, Y) if getColor(C) == red .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G + 1, B, Y) if getColor(C) == green .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G, B + 1, Y) if getColor(C) == blue .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G, B, Y + 1) if getColor(C) == yellow .
	ceq $gmfc(C ~ H, R, G, B, Y) = $gmfc(H, R, G, B, Y) if getColor(C) == all .
	
endfm

fmod PLAYER is

	pr QID .
	pr HAND .
	
	sort Player .
	
	op _ = _ : Qid Hand -> Player [ctor] .
	
	var H : Hand .
	var Q : Qid .
	
	op getHand : Player -> Hand .
	eq getHand(Q = H) = H .

endfm

mod GAME is

	pr PLAYER .
	pr INT .

	sort Game .
	
	op game : Player Player Player Deck Deck Bool Bool Int Bool -> Game [ctor] . 
	
	op exampleGame : -> Game .
	eq exampleGame = game(
			'A = (card(1,red) ~ card(1,yellow) ~ card(1,yellow)) ~ empty,
			'B = (card(1,blue) ~ card(2,red) ~ card(2,red)) ~ empty,
			'C = (card(1,red) ~ card(3,red) ~ card(3,red)) ~ empty,
			(card(4,red) | card(4,blue) | card(4,yellow) | card(8,red) | card(8,blue) | card(8,yellow) | card(9,red) | card(9,blue) | card(9,yellow)) | >,
			(card(5,red)) | >,
			false, false, 0, false
		) .
	
	vars Ap Bp Cp : Player .
	vars A' B' C' : Qid .
	vars A B C : Hand .
	var Cou : Int .
	vars D G : Deck .
	vars P P' P'' : Bool .
	vars Ca Ca' : Card .
	var H : Hand .
	vars Col Col' : Color .
	vars T T' : Type .
	
	op possibleMove : Hand Card -> Bool .
	ceq possibleMove(Ca ~ H, Ca') = true if getColor(Ca) == getColor(Ca') or getType(Ca) == getType(Ca') or getColor(Ca) == all .
	ceq possibleMove(H, Ca') = false if H == empty .
	eq possibleMove(Ca ~ H, Ca') = possibleMove(H, Ca') .
	
	op getPlayerA : Game -> Player .
	ceq getPlayerA(game(A' = A, Bp, Cp, D, G, P, P', Cou, P'')) = (A' = A) if A' = 'A .
	ceq getPlayerA(game(Ap, B' = B, Cp, D, G, P, P', Cou, P'')) = (B' = B) if B' = 'A .
	ceq getPlayerA(game(Ap, Bp, C' = C, D, G, P, P', Cou, P'')) = (C' = C) if C' = 'A .
	
	op isFinished : Player Player Player -> Bool .
	eq isFinished(Ap, Bp, Cp) = getHand(Ap) == empty or getHand(Bp) == empty or getHand(Cp) == empty .
	
	crl [activate-plustwo-draw] :
		game(Ap,Bp,Cp,D,(card(plus2, Col) | G), false, false, Cou, false) => game(Ap,Bp,Cp,D,(card(plus2, Col) | G),false, false, Cou, true) 
			if not containsType(getHand(Ap), plus2) and not isFinished(Ap, Bp, Cp) .
				
	crl [draw-two] :
		game(A' = A,Bp,Cp,(Ca | Ca' | D), G, false, false, Cou, true) => game(A' = Ca ~ Ca' ~ A,Bp,Cp,D,G,false, false, Cou - 2, true) 
			if Cou > 0 and not isFinished(A' = A, Bp, Cp) .
			
	crl [deactivate-plustwo-draw] :
		game(Ap,Bp,Cp,D,G, false, false, 0, true) => game(Ap,Bp,Cp,D,G,false, false, 0, false) if not isFinished(Ap, Bp, Cp) .
	
	crl [throw-color] :
		game(A' = card(T, Col) ~ H, Bp, Cp, D, (card(T', Col) | G), false, P, 0, false) => game(A' = H, Bp, Cp, D, (card(T, Col) | card(T', Col) | G), true, P, 0, false) if not isFinished(A' = card(T, Col) ~ H, Bp, Cp).
	
	crl [throw-type] :
		game(A' = card(T, Col) ~ H, Bp, Cp, D, (card(T, Col') | G), false, P, 0, false) => game(A' = H, Bp, Cp, D, (card(T, Col) | card(T, Col') | G), true, P, 0, false) if not isFinished(A' = card(T, Col) ~ H, Bp, Cp) .
		
	crl [throw-changecolor] :
		game(A' = card(change, all) ~ H, Bp, Cp, D, G, false, P, 0, false) => game(A' = H, Bp, Cp, D, (card(change, getMostFrequentColor(H)) | G), true, P, 0, false) if not isFinished(A' = card(change, all) ~ H, Bp, Cp) .
		
	crl [throw-plusfour] :
		game(A' = card(plus4, all) ~ H, Bp, Cp, D, G, false, P, 0, false) => game(Bp, Cp, A' = H, D, card(plus4, getMostFrequentColor(H)) | G, false, false, 4, true) if isFinished(A' = card(plus4, all) ~ H, Bp, Cp) .
		
	crl [turn-action-plustwo-on-general] :
		game(Ap,Bp,Cp,D,(card(plus2, Col) | G), true, P, Cou, false) => game(Bp,Cp,Ap,D,(card(plus2, Col) | G), false, false,Cou + 2, false) if not isFinished(Ap, Bp, Cp) .
		
	crl [turn-action-plustwo-on-plustwo] :
		game(A' = card(plus2, Col) ~ H,Bp,Cp,D,(Ca | G), P, false, Cou, false) => game(Bp,Cp,A' = H,D,(card(plus2, Col) | Ca | G),false, false, Cou + 2, false) 
			if getType(Ca) == plus2 and not isFinished(A' = card(plus2, Col) ~ H, Bp, Cp).
		
	crl [turn-action-reverse] :
		game(Ap,Bp,Cp,D,(Ca | G), true, P, 0, false) => game(Cp,Bp,Ap,D,(Ca | G),false, false, 0, false) 
			if getType(Ca) == reverse and not isFinished(Ap, Bp, Cp)  .
		
	crl [turn-action-stop-cumulative] :
		game(Ap,B' = Ca' ~ H,Cp,D,(Ca | G), true, P, 0,false) => game(B' = H,Cp,Ap,D,(Ca' | Ca | G), true, false, 0,false) 
			if getType(Ca) == stop and getType(Ca') == stop and not isFinished(Ap, B' = Ca' ~ H, Cp)  .
		
	crl [turn-action-stop] :
		game(Ap,Bp,Cp,D,(Ca | G), true, P, 0,false) => game(Cp,Ap,Bp,D,(Ca | G),false, false, 0,false) 
			if getType(Ca) == stop and not containsType(getHand(Bp), stop) and not isFinished(Ap, Bp, Cp) .
		
	crl [turn-number] :
		game(Ap,Bp,Cp,D,(Ca | G), true, P, 0,false) => game(Bp,Cp,Ap,D,(Ca | G),false, false, 0,false) 
			if isNumber(Ca) or getType(Ca) == change and not isFinished(Ap, Bp, Cp) .
		
	crl [draw] :
		game(A' = A, Bp, Cp, (Ca | D), (Ca' | G), false, false, 0 ,false) => game(A' = A ~ Ca, Bp, Cp, D, (Ca' | G), false, true, 0, false) 
			if not possibleMove(A, Ca') and not isFinished(A' = A, Bp, Cp) .
			
	crl [turn-draw-nomove] :
		game(A' = A, Bp, Cp, (Ca | D), (Ca' | G), false, true, 0 ,false) => game(Bp, Cp, A' = A ~ Ca,  D, (Ca' | G), false, false, 0, false) 
			if not possibleMove(A, Ca') and not isFinished(A' = A, Bp, Cp) .

endm