	*** THROW RULES
	
	-- Throw card based on equal top card color
	crl [throw-color] :
		game(A' = card(T, Col) ~ H, Bp, Cp, D, (card(T', Col) | G), false, P, 0, false) => game(Bp, Cp, A' = H, D, (card(T, Col) | card(T', Col) | G), true, P, 0, false) 
			if not isFinished(A' = card(T, Col) ~ H, Bp, Cp) and not T == reverse and not T == plus2 .
	
	-- Throw card based on equal top card type
	crl [throw-type] :
		game(A' = card(T, Col) ~ H, Bp, Cp, D, (card(T, Col') | G), false, P, 0, false) => game(Bp, Cp, A' = H, D, (card(T, Col) | card(T, Col') | G), true, P, 0, false) 
			if not isFinished(A' = card(T, Col) ~ H, Bp, Cp) and not T == reverse and not T == plus2 .
			
	crl [throw-plustwo] :
		game(A' = card(plus2, Col) ~ H,Bp,Cp,D,(card(T, Col') | G), false, P, Cou, false) => game(Bp,Cp,A' = H,D,(card(plus2, Col) | G), true, false,Cou + 2, false) 
			if not isFinished(A' = card(plus2, Col) ~ H, Bp, Cp) and (T == plus2 or Col == Col') .
			
	crl [throw-reverse] :
		game(A' = card(reverse, Col) ~ H, Bp, Cp, D, (card(T, Col') | G), false, P, 0, false) => game(Cp, Bp, A' = H, D, (card(T, Col) | card(T, Col') | G), true, P, 0, false) 
			if not isFinished(A' = card(reverse, Col) ~ H, Bp, Cp) and (T == reverse or Col == Col') .
		
	-- Throw a change color card 
	crl [throw-changecolor] :
		game(A' = card(change, all) ~ H, Bp, Cp, D, G, false, P, 0, false) => game(Bp, Cp, A' = H, D, (card(change, getMostFrequentColor(H)) | G), false, P, 0, false) 
			if not isFinished(A' = card(change, all) ~ H, Bp, Cp) .
		
	-- Throw a plus four card
	crl [throw-plusfour] :
		game(A' = card(plus4, all) ~ H, Bp, Cp, D, G, false, P, 0, false) => game(Bp, Cp, A' = H, D, card(plus4, getMostFrequentColor(H)) | G, true, false, 4, true) 
			if not isFinished(A' = card(plus4, all) ~ H, Bp, Cp) .
		
	*** TURN CHANGE RULES
		
	crl [turn-action-plustwo-on-general] :
		game(Ap,Bp,Cp,D,(card(plus2, Col) | G), true, P, Cou, false) => game(Ap,Bp,Cp,D,(card(plus2, Col) | G), false, false,Cou + 2, false) 
			if not isFinished(Ap, Bp, Cp) .
		
	crl [turn-action-plustwo-on-plustwo] :
		game(A' = card(plus2, Col) ~ H,Bp,Cp,D,(Ca | G), P, false, Cou, false) => game(Bp,Cp,A' = H,D,(card(plus2, Col) | Ca | G),false, false, Cou + 2, false) 
			if getType(Ca) == plus2 and not isFinished(A' = card(plus2, Col) ~ H, Bp, Cp).
		
	crl [turn-action-reverse] :
		game(Ap,Bp,Cp,D,(Ca | G), true, P, 0, false) => game(Cp,Bp,Ap,D,(Ca | G),false, false, 0, false) 
			if getType(Ca) == reverse and not isFinished(Ap, Bp, Cp)  .
		
	crl [turn-action-stop-cumulative] :
		game(Ap,B' = Ca' ~ H,Cp,D,(Ca | G), true, P, 0,false) => game(B' = H,Cp,Ap,D,(Ca' | Ca | G), true, false, 0,false) 
			if getType(Ca) == stop and getType(Ca') == stop and not isFinished(Ap, B' = Ca' ~ H, Cp)  .
		
	crl [turn-action-stop] :
		game(Ap,Bp,Cp,D,(Ca | G), true, P, 0,false) => game(Cp,Ap,Bp,D,(Ca | G),false, false, 0,false) 
			if getType(Ca) == stop and not containsType(getHand(Bp), stop) and not isFinished(Ap, Bp, Cp) .
		
	crl [turn-number] :
		game(Ap,Bp,Cp,D,(Ca | G), true, P, 0,false) => game(Bp,Cp,Ap,D,(Ca | G),false, false, 0,false) 
			if isNumber(Ca) or getType(Ca) == change and not isFinished(Ap, Bp, Cp) .
			
	crl [turn-nomove] :
		game(A' = A, Bp, Cp, (Ca | D), (Ca' | G), false, true, 0 ,false) => game(Bp, Cp, A' = A ~ Ca,  D, (Ca' | G), false, false, 0, false) 
			if not possibleMove(A, Ca') and not isFinished(A' = A, Bp, Cp) .
			
	*** DRAWING RULES
		
	crl [activate-plustwo-draw] :
		game(Ap,Bp,Cp,D,(card(plus2, Col) | G), false, false, Cou, false) => game(Ap,Bp,Cp,D,(card(plus2, Col) | G),false, false, Cou, true) 
			if not containsType(getHand(Ap), plus2) and not isFinished(Ap, Bp, Cp) .
			
	crl [draw-forced] :
		game(A' = A,Bp,Cp,(Ca | D), G, false, false, Cou, true) => game(A' = Ca ~ A,Bp,Cp,D,G,false, false, Cou - 1, true) 
			if Cou > 0 and not isFinished(A' = A, Bp, Cp) .
		
	crl [draw] :
		game(A' = A, Bp, Cp, (Ca | D), (Ca' | G), false, false, 0 ,false) => game(A' = A ~ Ca, Bp, Cp, D, (Ca' | G), false, true, 0, false) 
			if not possibleMove(A, Ca') and not isFinished(A' = A, Bp, Cp) .
					
	crl [deactivate-draw] :
		game(Ap,Bp,Cp,D,G, false, false, 0, true) => game(Ap,Bp,Cp,D,G,false, false, 0, false) 
			if not isFinished(Ap, Bp, Cp) .
			
	crl [shuffle] :
		game(Ap, Bp, Cp, D, (Ca | G), P, P', Cou, P'') => game(Ap, Bp, Cp, removeCard(removeHand(removeHand(removeHand(shuffleDeck, getHand(Cp)), getHand(Bp)), getHand(Ap)), Ca), Ca | >, P, P', Cou, P'')
			if D == > and not isFinished(Ap, Bp, Cp) .